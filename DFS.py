#스택자료구조혹은 재귀함수이용
#방문하지 않은 노드가 있다면 가장 작은 번호의 노드부터 방문
#탐색시작노드스택삽입 후 방문처리
#스택 최상단 노드에 방문안한 인접 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문 처리
def dfs(graph, v, visited):
    visited[v] = True
    print(v, end=' ')
    #현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]
visited = [False] * 9
dfs(graph, 1, visited)
#가장 작은 노드를 스택에 넣고 방문 처리
#스택의 top노드에 저장된 값을 기준으로 DFS진행
#가장 깊게 들어갔다면(더 이상 들어갈 노드가 없다면)
#다른 방향으로 간다

#방문하지 않은 인접 노드 없으면 스택에서 최상단 노드 꺼내기
#더이상 2번과정 반복못할 때까지 반복하기
